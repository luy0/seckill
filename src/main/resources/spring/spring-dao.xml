<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Spring and mybatis integration-->
    <!-- 1.database, Redis parameters,
           when loading several docs, before last second one, ignore-unresolvable is true -->
    <context:property-placeholder location = "classpath:jdbc.properties" ignore-unresolvable="true"/>

    <!-- 2.c3p0 database connection pool -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- basic property driverClass, jdbcUrl, user, password -->
        <property name="driverClass" value="${db.driver}" />
        <property name="jdbcUrl" value="${db.url}" />
        <property name="user" value="${db.username}" />
        <property name="password" value="${db.password}" />

        <!-- c3p0 private property -->
        <!-- maxPoolSize, default 15 -->
        <property name="maxPoolSize" value="30"/>
        <!-- minPoolSize, default 3 -->
        <property name="minPoolSize" value="10"/>
        <!-- After closing connecting pool, remove it and not to auto commit, default false -->
        <property name="autoCommitOnClose" value="false"/>
        <!-- over-time connection, default 0 means keep waiting -->
        <property name="checkoutTimeout" value="1000"/>
        <!-- re-connecting times -->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!-- agreement prior to setting -->
    <!-- Following is the critical part for mybatis and spring integration setting -->
    <!--３.set SqlSessionFactory object -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- Loading database connecting pool -->
        <property name="dataSource" ref="dataSource"/>
        <!-- set mybatis global xml: mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- scan entity package to use class name and use ; for different name -->
        <property name="typeAliasesPackage" value="org.seckill.entity"/>
        <!-- scan sql xml : corresponding xml for mapper -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--４:set Dao interface to implement it dynamically, and load to spring container -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- load SqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- provide Dao interface for scanning -->
        <property name="basePackage" value="org.seckill.dao"/>
    </bean>

    <!-- load Dao setting to Bean container -->
    <bean id="redisDao" class = "org.seckill.dao.RedisDao">
        <constructor-arg index="0" value="${redis.ip}"/>
        <constructor-arg index="1" value="${redis.port}"/>
    </bean>
</beans>
